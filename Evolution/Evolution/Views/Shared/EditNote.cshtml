@model Evolution.Models.ViewModels.EditNoteViewModel
@using Evolution.Resources
@using Evolution.Extensions

@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    var controllerName = this.ViewContext.RouteData.Values["controller"].ToString();
}

@using (Html.BeginForm("Save", controllerName, FormMethod.Post, new { enctype = "multipart/form-data" })) {
    @Html.AntiForgeryToken()
    @Html.HiddenFor(m => m.LGS)
    @Html.HiddenFor(m => m.ParentId)
    @Html.HiddenFor(m => m.Note.Id)
    @Html.HiddenFor(m => m.Note.NoteType)
    @Html.HiddenFor(m => m.Note.CompanyId)
    @Html.HiddenFor(m => m.Note.ParentId)
    @Html.HiddenFor(m => m.Note.DateCreated)
    @Html.HiddenFor(m => m.Note.CreatedById)

    <div class="panel panel-default">
        <div class="panel-heading">@Model.PageTitle</div>
        <div class="panel-body">
            <div class="row">
                <div class="col-sm-2 cellpadding">
                    @EvolutionResources.lblSubject
                </div>
                <div class="col-sm-5 cellpadding">
                    @Html.EditorFor(m => m.Note.Subject, new { htmlAttributes = new { @class = "form-control", @style = "width:100%", @maxlength = "128" } })
                </div>
            </div>
            <div class="row">
                <div class="col-sm-2 cellpadding">
                    @EvolutionResources.lblMessage
                </div>
                <div class="col-sm-10 cellpadding">
                    @Html.TextAreaFor(m => m.Note.Message, new { @class = "form-control", style = "width:100%; height:250px", maxlength = 8192 })
                </div>
            </div>
            <br />

            <div class="row">
                <div class="col-sm-2 cellpadding">
                    Attachment/s:
                </div>
                <div class="col-sm-10 cellpadding">
                    <div id="upload-files">
                        <button type="button" class="button" onclick="SelectFileUpload()">
                            <span class="glyphicon glyphicon-open-file" data-toggle="tooltip" data-placement="bottom" title="Click to Upload" style="font-size:2em;margin-bottom:10px;"></span>
                        </button>
                        <input type="file" id="Note_Files" name="Note.Files" multiple style="display:none;" />
                    </div>
                    <div style="font-size:0.8em;">
                        @EvolutionResources.lblMaximumFileSize @Model.MaxUploadFileSize.ToBinaryUnit(BinaryUnit.MB)
                        @EvolutionResources.lblValidFileTypes @Model.ValidFileTypes
                    </div>
                    <div id="file-upload-filename"></div>
                </div>
            </div>

            <div class="row">
                <div class="col-sm-2 cellpadding">
                    @EvolutionResources.lblWebReferences
                </div>
            </div>
            <div class="row">
                <div class="col-sm-6 cellpadding">
                    @EvolutionResources.lblURL
                </div>
                <div class="col-sm-6 cellpadding">
                    @EvolutionResources.lblDescription
                </div>
            </div>
            @for (var i = 0; i < Model.Note.UrlReferences.Count(); i++) {
                <div class="row">
                    <div class="col-sm-6 cellpadding">
                        @Html.EditorFor(m => m.Note.UrlReferences[i].Url, new { htmlAttributes = new { @class = "form-control", @style = "width:100%", @maxlength = "255" } })
                    </div>
                    <div class="col-sm-6 cellpadding">
                        @Html.EditorFor(m => m.Note.UrlReferences[i].Description, new { htmlAttributes = new { @class = "form-control", @style = "width:100%", @maxlength = "255" } })
                    </div>
                </div>
            }
        </div>
        <div class="panel-footer text-right">
            <button type="submit" id="btnSave" name="command" value="save" class="btn btn-sm btn-primary" onclick="DisplayProgress()">@EvolutionResources.btnSave</button>
            <button type="submit" id="btnCancel" name="command" value="cancel" class="btn btn-sm btn-default" onclick="DisplayProgress()">@EvolutionResources.btnCancel</button>
        </div>
    </div>
}
<script type="text/javascript">
    ApplyFocus('Note_Subject');

    function SelectFileUpload() {
        var upload = document.getElementById('Note_Files');
        upload.click();
    }
    
    $('#Note_Files').change(function () {
        // Called when files are selected for upload
        if (typeof FileReader !== "undefined") {
            var msg;
            var validType = true;
            var noteFiles = document.getElementById('Note_Files');
            var size = 0;
            for (var i = 0; i < noteFiles.files.length; i++) {
                size += noteFiles.files[i].size;
                if (!IsValidFileType(noteFiles.files[i].name)) {
                    msg = '@EvolutionResources.errFileIsNotAValidType'.replace('%1', noteFiles.files[i].name);
                    DisplayError(1, msg);
                    EnableButton('btnSave', false);
                    validType = false;
                }
                else {
                    $('#file-upload-filename').append('<span style="color: green">' + noteFiles.files[i].name +'</span><br />');
                }
            }
            if (validType) {
                if (size > @Model.MaxUploadFileSize) {
                    var msg = '@EvolutionResources.errMaxFileUploadSizeExceeded'.replace('%1', '' + (size / 1000000).toFixed(2) + 'MB');
                    msg = msg.replace('%2', '@Model.MaxUploadFileSize.ToBinaryUnit(BinaryUnit.MB)');
                    DisplayError(1, msg);
                    $('#btnSave').prop('disabled', true);
                } else {
                    $('#btnSave').prop('disabled', false);
                    HideError();
                }
            }
        }
    });

    function IsValidFileType(fileName) {
        var allowed = ',@Model.ValidFileTypes,'.replace(/\s/g, '').toLowerCase();
        var tempName = fileName.toLowerCase();
        var pos = tempName.lastIndexOf('.');
        if (pos != -1) tempName = tempName.substr(pos + 1);
        pos = allowed.indexOf(',' + tempName + ',');
        if (pos != -1) {
            return true;
        } else {
            return false;
        }
    }

    function EnableButton(buttonName, enabled) {
        if (enabled) {
            $('#' + buttonName).prop('disabled', false);
        } else {
            $('#' + buttonName).prop('disabled', true);
        }
    }
    EnableButton('btnUpload', false);

</script>
