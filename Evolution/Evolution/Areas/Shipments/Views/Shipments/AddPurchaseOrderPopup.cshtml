@model Evolution.Models.ViewModels.ViewModelBase
@using Evolution.Resources

<div>
    <div id="divModal" class="modal-header">
        <button id="btnCloseDialog" type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
        <h4 class="modal-title"><span id="modalcaption">@EvolutionResources.bnrAddToShipmentSelectPurchaseOrder</span></h4>
    </div>
    <div class="modal-body">
        <div class="panel panel-default">
            <div class="panel-body">
                <div class="row">
                    <div class="col-sm-12 cellpadding">
                        <div id="poselectlist" class="table-responsive"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-footer">
        <button type="button" class="btn btn-sm btn-primary" onclick="DoAddPurchaseOrders()">@EvolutionResources.btnAddToShipment</button>
        <button type="button" class="btn btn-sm btn-default" data-dismiss="modal" onclick="">@EvolutionResources.btnCancel</button>
    </div>
</div>

<script type="text/javascript">
    $(document).ready(function () {

        var gridOptions = {
            appname: '@EvolutionResources.lblApplicationName',
            container: 'poselectlist',
            tableclass: 'gridStyle',
            pagenumber: 1,
            pagesizes: [ 6, 8, 10, 15, 20 ],
            showsearch: true,
            keyfield: 'Id',
            datasourceurl: '/Purchasing/Purchasing/GetPurchases?index={INDEX}&pageno={PAGENO}&pagesize={PAGESIZE}&search={SEARCH}&poStatus=0&warehouse=0&brandCategory=0',
            clearmessageondisplay: false,
            columnDefs: [
                { heading: '@EvolutionResources.lblOrderNumber', width: '100px', class: '', fields: [{ type: 'field', field: 'OrderNumber', width: '', class: '' }] },
                { heading: '@EvolutionResources.lblOrderDate', width: '80px', class: '', fields: [{ type: 'isodate', field: 'OrderDateISO', format: '@Model.DisplayDateFormat', width: '', class: '' }] },
                { heading: '@EvolutionResources.lblSalesPerson', width: '', class: '', fields: [{ type: 'field', field: 'SalesPersonName', width: '', class: '' }] },
                { heading: '@EvolutionResources.lblSupplier', width: '', class: '', fields: [{ type: 'field', field: 'SupplierName', width: '', class: '' }] },
                { heading: '@EvolutionResources.lblOrderStatus', width: '', class: '', fields: [{ type: 'field', field: 'POStatusText', width: '', class: '' }] },
                { heading: '@EvolutionResources.lblLandingDate', width: '80px', class: '', fields: [{ type: 'isodate', field: 'LandingDateISO', format: '@Model.DisplayDateFormat', width: '', class: '' }] },
                { heading: '@EvolutionResources.lblRealisticETA', width: '80px', class: '', fields: [{ type: 'isodate', field: 'RealisticRequiredDateISO', format: '@Model.DisplayDateFormat', width: '', class: '' }] },
                { heading: '@EvolutionResources.lblSelect', width: '', class: '', fields: [{ type: 'checkbox', field: '', width: '', class: '' }] }
            ]
        };

        gridManager.InitialiseGrid(gridOptions);

        setTimeout(doPopupGridSizing, 500);
    });

    function doPopupGridSizing() {
        var ww = $(window).width();
        var modalWidth = $('#divModal').width();
        var offset = (ww - modalWidth) + 50;

        SetGridWidthOffset(1, offset, true);
    }

    function DoAddPurchaseOrders() {
        var selectedItems = '';
        $('#poselectlist').find('input:checked').each(function (i, ob) {
            if (selectedItems != '') selectedItems += ',';
            selectedItems += $(ob).val();
        });

        if (selectedItems.length == 0) {
            DisplayError(1, '@EvolutionResources.errNoPurchaseOrdersHaveBeenSelected');
        } else {
            HideDialog();
            DisplayProgress();

            var url = '@Url.Action("DoAddPurchaseOrder")?si=' + $('#Shipment_Id').val() + '&pos=' + selectedItems;

            $.ajax({
                url: url,
            })
            .done(function (data, status, xhr) {
                DisplayGrid(0);
                if (data.Error.Message) DisplayError(data.Error.Icon, data.Error.Message);
            })
            .fail(function (xhr, status, error) {
                DisplayExclamationError('The webservice returned an error: ' + status + ' : ' + error);
            });
        }
    }

</script>
