//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Evolution.DAL
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class EvolutionEntities : DbContext
    {
        public EvolutionEntities()
            : base("name=EvolutionEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Allocation> Allocations { get; set; }
        public virtual DbSet<Brand> Brands { get; set; }
        public virtual DbSet<BrandBrandCategory> BrandBrandCategories { get; set; }
        public virtual DbSet<BrandCategory> BrandCategories { get; set; }
        public virtual DbSet<BrandCategorySalesPerson> BrandCategorySalesPersons { get; set; }
        public virtual DbSet<CarrierVessel> CarrierVessels { get; set; }
        public virtual DbSet<CompanyBrandCategory> CompanyBrandCategories { get; set; }
        public virtual DbSet<ContainerType> ContainerTypes { get; set; }
        public virtual DbSet<Country> Countries { get; set; }
        public virtual DbSet<CountrySubDivision> CountrySubDivisions { get; set; }
        public virtual DbSet<CreditCard> CreditCards { get; set; }
        public virtual DbSet<CreditCardProvider> CreditCardProviders { get; set; }
        public virtual DbSet<CreditClaimHeader> CreditClaimHeaders { get; set; }
        public virtual DbSet<CreditClaimItemCondition> CreditClaimItemConditions { get; set; }
        public virtual DbSet<CreditClaimLine> CreditClaimLines { get; set; }
        public virtual DbSet<CreditClaimReason> CreditClaimReasons { get; set; }
        public virtual DbSet<Currency> Currencies { get; set; }
        public virtual DbSet<Customer> Customers { get; set; }
        public virtual DbSet<CustomerAddress> CustomerAddresses { get; set; }
        public virtual DbSet<CustomerConflictSensitivity> CustomerConflictSensitivities { get; set; }
        public virtual DbSet<CustomerContact> CustomerContacts { get; set; }
        public virtual DbSet<CustomsDelay> CustomsDelays { get; set; }
        public virtual DbSet<EMailQueue> EMailQueues { get; set; }
        public virtual DbSet<FreightCarrier> FreightCarriers { get; set; }
        public virtual DbSet<FreightForwarder> FreightForwarders { get; set; }
        public virtual DbSet<Location> Locations { get; set; }
        public virtual DbSet<Lock> Locks { get; set; }
        public virtual DbSet<Log> Logs { get; set; }
        public virtual DbSet<LOV> LOVs { get; set; }
        public virtual DbSet<LOVItem> LOVItems { get; set; }
        public virtual DbSet<MarketingGroup> MarketingGroups { get; set; }
        public virtual DbSet<MarketingGroupSubscription> MarketingGroupSubscriptions { get; set; }
        public virtual DbSet<Medium> Media { get; set; }
        public virtual DbSet<MethodSigned> MethodSigneds { get; set; }
        public virtual DbSet<PaymentTerm> PaymentTerms { get; set; }
        public virtual DbSet<Permission> Permissions { get; set; }
        public virtual DbSet<PickDetail> PickDetails { get; set; }
        public virtual DbSet<PickDetailStatu> PickDetailStatus { get; set; }
        public virtual DbSet<PickHeader> PickHeaders { get; set; }
        public virtual DbSet<PickHeaderStatu> PickHeaderStatus { get; set; }
        public virtual DbSet<Port> Ports { get; set; }
        public virtual DbSet<PortTransitTime> PortTransitTimes { get; set; }
        public virtual DbSet<PriceLevel> PriceLevels { get; set; }
        public virtual DbSet<ProductLocation> ProductLocations { get; set; }
        public virtual DbSet<ProductPrice> ProductPrices { get; set; }
        public virtual DbSet<Purchase> Purchases { get; set; }
        public virtual DbSet<PurchaseOrderDetail> PurchaseOrderDetails { get; set; }
        public virtual DbSet<PurchaseOrderHeaderStatu> PurchaseOrderHeaderStatus { get; set; }
        public virtual DbSet<ReasonCode> ReasonCodes { get; set; }
        public virtual DbSet<Region> Regions { get; set; }
        public virtual DbSet<Sale> Sales { get; set; }
        public virtual DbSet<SaleNextAction> SaleNextActions { get; set; }
        public virtual DbSet<SalesOrderDetail> SalesOrderDetails { get; set; }
        public virtual DbSet<SalesOrderHeaderStatu> SalesOrderHeaderStatus { get; set; }
        public virtual DbSet<SalesOrderHeaderSubStatu> SalesOrderHeaderSubStatus { get; set; }
        public virtual DbSet<SalesOrderLineStatu> SalesOrderLineStatus { get; set; }
        public virtual DbSet<ScheduledTask> ScheduledTasks { get; set; }
        public virtual DbSet<ScheduledTaskLog> ScheduledTaskLogs { get; set; }
        public virtual DbSet<Shipment> Shipments { get; set; }
        public virtual DbSet<ShipmentContent> ShipmentContents { get; set; }
        public virtual DbSet<ShipmentPhaseTime> ShipmentPhaseTimes { get; set; }
        public virtual DbSet<Supplier> Suppliers { get; set; }
        public virtual DbSet<SupplierAttachment> SupplierAttachments { get; set; }
        public virtual DbSet<SupplierNote> SupplierNotes { get; set; }
        public virtual DbSet<SupplierPayment> SupplierPayments { get; set; }
        public virtual DbSet<SupplierTerm> SupplierTerms { get; set; }
        public virtual DbSet<TaxCode> TaxCodes { get; set; }
        public virtual DbSet<TestFileLog> TestFileLogs { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<UserGroup> UserGroups { get; set; }
        public virtual DbSet<UserGroupPermission> UserGroupPermissions { get; set; }
        public virtual DbSet<UserGroupUser> UserGroupUsers { get; set; }
        public virtual DbSet<UserSessionProperty> UserSessionProperties { get; set; }
        public virtual DbSet<AuditLog> AuditLogs { get; set; }
        public virtual DbSet<SequenceNumber> SequenceNumbers { get; set; }
        public virtual DbSet<PurchaseOrderDetailTemp> PurchaseOrderDetailTemps { get; set; }
        public virtual DbSet<MetadataElement> MetadataElements { get; set; }
        public virtual DbSet<MetadataTemplate> MetadataTemplates { get; set; }
        public virtual DbSet<MetadataTemplateElement> MetadataTemplateElements { get; set; }
        public virtual DbSet<ProductData> ProductDatas { get; set; }
        public virtual DbSet<OrderPayment> OrderPayments { get; set; }
        public virtual DbSet<FileTransferConfiguration> FileTransferConfigurations { get; set; }
        public virtual DbSet<EMailQueueAttachment> EMailQueueAttachments { get; set; }
        public virtual DbSet<Company> Companies { get; set; }
        public virtual DbSet<PurchaseOrderHeader> PurchaseOrderHeaders { get; set; }
        public virtual DbSet<PurchaseOrderHeaderTemp> PurchaseOrderHeaderTemps { get; set; }
        public virtual DbSet<Note> Notes { get; set; }
        public virtual DbSet<NoteAttachment> NoteAttachments { get; set; }
        public virtual DbSet<MessageTemplate> MessageTemplates { get; set; }
        public virtual DbSet<SalesOrderDetailTemp> SalesOrderDetailTemps { get; set; }
        public virtual DbSet<MediaType> MediaTypes { get; set; }
        public virtual DbSet<DeliveryWindow> DeliveryWindows { get; set; }
        public virtual DbSet<FileImportField> FileImportFields { get; set; }
        public virtual DbSet<FileImportRow> FileImportRows { get; set; }
        public virtual DbSet<FileImportFile> FileImportFiles { get; set; }
        public virtual DbSet<SalesOrderHeaderTemp> SalesOrderHeaderTemps { get; set; }
        public virtual DbSet<SalesOrderHeader> SalesOrderHeaders { get; set; }
        public virtual DbSet<ProductMedia> ProductMedias { get; set; }
        public virtual DbSet<Product> Products { get; set; }
        public virtual DbSet<FileLog> FileLogs { get; set; }
        public virtual DbSet<Task> Tasks { get; set; }
        public virtual DbSet<ProductAdditionalCategory> ProductAdditionalCategories { get; set; }
        public virtual DbSet<PepperiImportHeaderTemp> PepperiImportHeaderTemps { get; set; }
        public virtual DbSet<PepperiImportDetailTemp> PepperiImportDetailTemps { get; set; }
        public virtual DbSet<CustomerDefault> CustomerDefaults { get; set; }
        public virtual DbSet<ProductIP> ProductIPs { get; set; }
        public virtual DbSet<ProductCompliance> ProductCompliances { get; set; }
        public virtual DbSet<ProductComplianceAttachment> ProductComplianceAttachments { get; set; }
        public virtual DbSet<UserAlias> UserAlias { get; set; }
        public virtual DbSet<CreditClaimReplacementOrder> CreditClaimReplacementOrders { get; set; }
        public virtual DbSet<NuOrderImportTemp> NuOrderImportTemps { get; set; }
        public virtual DbSet<MenuOption> MenuOptions { get; set; }
        public virtual DbSet<ShopifyImportDetailTemp> ShopifyImportDetailTemps { get; set; }
        public virtual DbSet<ShopifyImportHeaderTemp> ShopifyImportHeaderTemps { get; set; }
        public virtual DbSet<DocumentTemplate> DocumentTemplates { get; set; }
        public virtual DbSet<SupplierAddress> SupplierAddresses { get; set; }
        public virtual DbSet<SupplierAccountsQueue> SupplierAccountsQueues { get; set; }
    
        public virtual int DeleteCompany(Nullable<int> companyId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteCompany", companyIdParameter);
        }
    
        public virtual ObjectResult<DeleteCustomer_Result> DeleteCustomer(Nullable<int> companyId, Nullable<int> customerId, Nullable<int> noteType)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            var noteTypeParameter = noteType.HasValue ?
                new ObjectParameter("NoteType", noteType) :
                new ObjectParameter("NoteType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DeleteCustomer_Result>("DeleteCustomer", companyIdParameter, customerIdParameter, noteTypeParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetNextSequenceNumber(Nullable<int> companyId, Nullable<int> sequenceId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var sequenceIdParameter = sequenceId.HasValue ?
                new ObjectParameter("SequenceId", sequenceId) :
                new ObjectParameter("SequenceId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetNextSequenceNumber", companyIdParameter, sequenceIdParameter);
        }
    
        public virtual int CopyPurchaseOrderToTemp(Nullable<int> companyId, Nullable<int> userId, Nullable<int> purchaseOrderHeaderId, Nullable<int> purchaseOrderHeaderTempId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var purchaseOrderHeaderIdParameter = purchaseOrderHeaderId.HasValue ?
                new ObjectParameter("PurchaseOrderHeaderId", purchaseOrderHeaderId) :
                new ObjectParameter("PurchaseOrderHeaderId", typeof(int));
    
            var purchaseOrderHeaderTempIdParameter = purchaseOrderHeaderTempId.HasValue ?
                new ObjectParameter("PurchaseOrderHeaderTempId", purchaseOrderHeaderTempId) :
                new ObjectParameter("PurchaseOrderHeaderTempId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CopyPurchaseOrderToTemp", companyIdParameter, userIdParameter, purchaseOrderHeaderIdParameter, purchaseOrderHeaderTempIdParameter);
        }
    
        public virtual int CopyTempToPurchaseOrder(Nullable<int> companyId, Nullable<int> purchaseOrderHeaderTempId, Nullable<int> purchaseOrderHeaderId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var purchaseOrderHeaderTempIdParameter = purchaseOrderHeaderTempId.HasValue ?
                new ObjectParameter("PurchaseOrderHeaderTempId", purchaseOrderHeaderTempId) :
                new ObjectParameter("PurchaseOrderHeaderTempId", typeof(int));
    
            var purchaseOrderHeaderIdParameter = purchaseOrderHeaderId.HasValue ?
                new ObjectParameter("PurchaseOrderHeaderId", purchaseOrderHeaderId) :
                new ObjectParameter("PurchaseOrderHeaderId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CopyTempToPurchaseOrder", companyIdParameter, purchaseOrderHeaderTempIdParameter, purchaseOrderHeaderIdParameter);
        }
    
        public virtual ObjectResult<FindAllocations_Result> FindAllocations(Nullable<int> purchaserOrderHeaderId)
        {
            var purchaserOrderHeaderIdParameter = purchaserOrderHeaderId.HasValue ?
                new ObjectParameter("PurchaserOrderHeaderId", purchaserOrderHeaderId) :
                new ObjectParameter("PurchaserOrderHeaderId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FindAllocations_Result>("FindAllocations", purchaserOrderHeaderIdParameter);
        }
    
        public virtual int CopyListsOfValues(Nullable<int> sourceCompanyId, Nullable<int> targetCompanyId)
        {
            var sourceCompanyIdParameter = sourceCompanyId.HasValue ?
                new ObjectParameter("SourceCompanyId", sourceCompanyId) :
                new ObjectParameter("SourceCompanyId", typeof(int));
    
            var targetCompanyIdParameter = targetCompanyId.HasValue ?
                new ObjectParameter("TargetCompanyId", targetCompanyId) :
                new ObjectParameter("TargetCompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CopyListsOfValues", sourceCompanyIdParameter, targetCompanyIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> CleanupTables(string sessionId)
        {
            var sessionIdParameter = sessionId != null ?
                new ObjectParameter("SessionId", sessionId) :
                new ObjectParameter("SessionId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("CleanupTables", sessionIdParameter);
        }
    
        public virtual int CopyDataForTest(Nullable<int> sourceCompanyId, Nullable<int> targetCompanyId)
        {
            var sourceCompanyIdParameter = sourceCompanyId.HasValue ?
                new ObjectParameter("SourceCompanyId", sourceCompanyId) :
                new ObjectParameter("SourceCompanyId", typeof(int));
    
            var targetCompanyIdParameter = targetCompanyId.HasValue ?
                new ObjectParameter("TargetCompanyId", targetCompanyId) :
                new ObjectParameter("TargetCompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CopyDataForTest", sourceCompanyIdParameter, targetCompanyIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> CopyPurchaseOrder(Nullable<int> purchaseOrderHeaderId, Nullable<decimal> newOrderNumber, Nullable<bool> redirectAllocations)
        {
            var purchaseOrderHeaderIdParameter = purchaseOrderHeaderId.HasValue ?
                new ObjectParameter("PurchaseOrderHeaderId", purchaseOrderHeaderId) :
                new ObjectParameter("PurchaseOrderHeaderId", typeof(int));
    
            var newOrderNumberParameter = newOrderNumber.HasValue ?
                new ObjectParameter("NewOrderNumber", newOrderNumber) :
                new ObjectParameter("NewOrderNumber", typeof(decimal));
    
            var redirectAllocationsParameter = redirectAllocations.HasValue ?
                new ObjectParameter("RedirectAllocations", redirectAllocations) :
                new ObjectParameter("RedirectAllocations", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("CopyPurchaseOrder", purchaseOrderHeaderIdParameter, newOrderNumberParameter, redirectAllocationsParameter);
        }
    
        public virtual int CopySaleToTemp(Nullable<int> companyId, Nullable<int> userId, Nullable<int> salesOrderHeaderId, Nullable<int> salesOrderHeaderTempId, Nullable<int> copyOrder)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var salesOrderHeaderIdParameter = salesOrderHeaderId.HasValue ?
                new ObjectParameter("SalesOrderHeaderId", salesOrderHeaderId) :
                new ObjectParameter("SalesOrderHeaderId", typeof(int));
    
            var salesOrderHeaderTempIdParameter = salesOrderHeaderTempId.HasValue ?
                new ObjectParameter("SalesOrderHeaderTempId", salesOrderHeaderTempId) :
                new ObjectParameter("SalesOrderHeaderTempId", typeof(int));
    
            var copyOrderParameter = copyOrder.HasValue ?
                new ObjectParameter("CopyOrder", copyOrder) :
                new ObjectParameter("CopyOrder", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CopySaleToTemp", companyIdParameter, userIdParameter, salesOrderHeaderIdParameter, salesOrderHeaderTempIdParameter, copyOrderParameter);
        }
    
        public virtual int CopyTempToSale(Nullable<int> companyId, Nullable<int> salesOrderHeaderTempId, Nullable<int> salesOrderHeaderId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var salesOrderHeaderTempIdParameter = salesOrderHeaderTempId.HasValue ?
                new ObjectParameter("SalesOrderHeaderTempId", salesOrderHeaderTempId) :
                new ObjectParameter("SalesOrderHeaderTempId", typeof(int));
    
            var salesOrderHeaderIdParameter = salesOrderHeaderId.HasValue ?
                new ObjectParameter("SalesOrderHeaderId", salesOrderHeaderId) :
                new ObjectParameter("SalesOrderHeaderId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CopyTempToSale", companyIdParameter, salesOrderHeaderTempIdParameter, salesOrderHeaderIdParameter);
        }
    
        public virtual ObjectResult<FindShippingRegister_Result> FindShippingRegister(Nullable<int> companyId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FindShippingRegister_Result>("FindShippingRegister", companyIdParameter);
        }
    
        public virtual ObjectResult<FindCancellationCustomersList_Result> FindCancellationCustomersList(Nullable<int> companyId, Nullable<int> brandCategoryId, Nullable<bool> dwc, Nullable<int> productStatus)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var brandCategoryIdParameter = brandCategoryId.HasValue ?
                new ObjectParameter("BrandCategoryId", brandCategoryId) :
                new ObjectParameter("BrandCategoryId", typeof(int));
    
            var dwcParameter = dwc.HasValue ?
                new ObjectParameter("dwc", dwc) :
                new ObjectParameter("dwc", typeof(bool));
    
            var productStatusParameter = productStatus.HasValue ?
                new ObjectParameter("ProductStatus", productStatus) :
                new ObjectParameter("ProductStatus", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FindCancellationCustomersList_Result>("FindCancellationCustomersList", companyIdParameter, brandCategoryIdParameter, dwcParameter, productStatusParameter);
        }
    
        public virtual ObjectResult<FindCancellationProductList_Result> FindCancellationProductList(Nullable<int> companyId, Nullable<int> brandCategoryId, string customerList, string orderList, Nullable<bool> dwc, Nullable<int> productStatus)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var brandCategoryIdParameter = brandCategoryId.HasValue ?
                new ObjectParameter("BrandCategoryId", brandCategoryId) :
                new ObjectParameter("BrandCategoryId", typeof(int));
    
            var customerListParameter = customerList != null ?
                new ObjectParameter("CustomerList", customerList) :
                new ObjectParameter("CustomerList", typeof(string));
    
            var orderListParameter = orderList != null ?
                new ObjectParameter("OrderList", orderList) :
                new ObjectParameter("OrderList", typeof(string));
    
            var dwcParameter = dwc.HasValue ?
                new ObjectParameter("dwc", dwc) :
                new ObjectParameter("dwc", typeof(bool));
    
            var productStatusParameter = productStatus.HasValue ?
                new ObjectParameter("ProductStatus", productStatus) :
                new ObjectParameter("ProductStatus", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FindCancellationProductList_Result>("FindCancellationProductList", companyIdParameter, brandCategoryIdParameter, customerListParameter, orderListParameter, dwcParameter, productStatusParameter);
        }
    
        public virtual ObjectResult<FindCancellationWarehouseList_Result> FindCancellationWarehouseList(Nullable<int> companyId, Nullable<bool> dwc, Nullable<int> productStatus)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var dwcParameter = dwc.HasValue ?
                new ObjectParameter("dwc", dwc) :
                new ObjectParameter("dwc", typeof(bool));
    
            var productStatusParameter = productStatus.HasValue ?
                new ObjectParameter("ProductStatus", productStatus) :
                new ObjectParameter("ProductStatus", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FindCancellationWarehouseList_Result>("FindCancellationWarehouseList", companyIdParameter, dwcParameter, productStatusParameter);
        }
    
        public virtual ObjectResult<FindCancellationAccountManagerList_Result> FindCancellationAccountManagerList(Nullable<int> companyId, string customerList, string orderList, Nullable<bool> dwc, Nullable<int> productStatus)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var customerListParameter = customerList != null ?
                new ObjectParameter("CustomerList", customerList) :
                new ObjectParameter("CustomerList", typeof(string));
    
            var orderListParameter = orderList != null ?
                new ObjectParameter("OrderList", orderList) :
                new ObjectParameter("OrderList", typeof(string));
    
            var dwcParameter = dwc.HasValue ?
                new ObjectParameter("dwc", dwc) :
                new ObjectParameter("dwc", typeof(bool));
    
            var productStatusParameter = productStatus.HasValue ?
                new ObjectParameter("ProductStatus", productStatus) :
                new ObjectParameter("ProductStatus", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FindCancellationAccountManagerList_Result>("FindCancellationAccountManagerList", companyIdParameter, customerListParameter, orderListParameter, dwcParameter, productStatusParameter);
        }
    
        public virtual ObjectResult<FindCancellationSummaryList_Result> FindCancellationSummaryList(Nullable<int> companyId, string customerList, string orderList, string productList, string locationList, string acctMgrList, Nullable<bool> dwc, Nullable<int> productStatus, Nullable<int> allocationStatus)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var customerListParameter = customerList != null ?
                new ObjectParameter("CustomerList", customerList) :
                new ObjectParameter("CustomerList", typeof(string));
    
            var orderListParameter = orderList != null ?
                new ObjectParameter("OrderList", orderList) :
                new ObjectParameter("OrderList", typeof(string));
    
            var productListParameter = productList != null ?
                new ObjectParameter("ProductList", productList) :
                new ObjectParameter("ProductList", typeof(string));
    
            var locationListParameter = locationList != null ?
                new ObjectParameter("LocationList", locationList) :
                new ObjectParameter("LocationList", typeof(string));
    
            var acctMgrListParameter = acctMgrList != null ?
                new ObjectParameter("AcctMgrList", acctMgrList) :
                new ObjectParameter("AcctMgrList", typeof(string));
    
            var dwcParameter = dwc.HasValue ?
                new ObjectParameter("dwc", dwc) :
                new ObjectParameter("dwc", typeof(bool));
    
            var productStatusParameter = productStatus.HasValue ?
                new ObjectParameter("ProductStatus", productStatus) :
                new ObjectParameter("ProductStatus", typeof(int));
    
            var allocationStatusParameter = allocationStatus.HasValue ?
                new ObjectParameter("AllocationStatus", allocationStatus) :
                new ObjectParameter("AllocationStatus", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FindCancellationSummaryList_Result>("FindCancellationSummaryList", companyIdParameter, customerListParameter, orderListParameter, productListParameter, locationListParameter, acctMgrListParameter, dwcParameter, productStatusParameter, allocationStatusParameter);
        }
    
        public virtual ObjectResult<FindCancellationOrderList_Result> FindCancellationOrderList(Nullable<int> companyId, Nullable<int> brandCategoryId, string customerList, Nullable<bool> dwc, Nullable<int> productStatus)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var brandCategoryIdParameter = brandCategoryId.HasValue ?
                new ObjectParameter("BrandCategoryId", brandCategoryId) :
                new ObjectParameter("BrandCategoryId", typeof(int));
    
            var customerListParameter = customerList != null ?
                new ObjectParameter("CustomerList", customerList) :
                new ObjectParameter("CustomerList", typeof(string));
    
            var dwcParameter = dwc.HasValue ?
                new ObjectParameter("dwc", dwc) :
                new ObjectParameter("dwc", typeof(bool));
    
            var productStatusParameter = productStatus.HasValue ?
                new ObjectParameter("ProductStatus", productStatus) :
                new ObjectParameter("ProductStatus", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FindCancellationOrderList_Result>("FindCancellationOrderList", companyIdParameter, brandCategoryIdParameter, customerListParameter, dwcParameter, productStatusParameter);
        }
    
        public virtual int ImportFileLines(Nullable<int> companyId, Nullable<int> userid)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("Userid", userid) :
                new ObjectParameter("Userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ImportFileLines", companyIdParameter, useridParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> WriteToLog(Nullable<int> logSection, Nullable<int> severity, string url, string message, string stackTrace)
        {
            var logSectionParameter = logSection.HasValue ?
                new ObjectParameter("LogSection", logSection) :
                new ObjectParameter("LogSection", typeof(int));
    
            var severityParameter = severity.HasValue ?
                new ObjectParameter("Severity", severity) :
                new ObjectParameter("Severity", typeof(int));
    
            var urlParameter = url != null ?
                new ObjectParameter("Url", url) :
                new ObjectParameter("Url", typeof(string));
    
            var messageParameter = message != null ?
                new ObjectParameter("Message", message) :
                new ObjectParameter("Message", typeof(string));
    
            var stackTraceParameter = stackTrace != null ?
                new ObjectParameter("StackTrace", stackTrace) :
                new ObjectParameter("StackTrace", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("WriteToLog", logSectionParameter, severityParameter, urlParameter, messageParameter, stackTraceParameter);
        }
    
        public virtual ObjectResult<Nullable<System.DateTimeOffset>> FindAllocationECD(Nullable<int> salesOrderDetailId)
        {
            var salesOrderDetailIdParameter = salesOrderDetailId.HasValue ?
                new ObjectParameter("SalesOrderDetailId", salesOrderDetailId) :
                new ObjectParameter("SalesOrderDetailId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<System.DateTimeOffset>>("FindAllocationECD", salesOrderDetailIdParameter);
        }
    
        public virtual ObjectResult<FindTransactionDrillDown_Result> FindTransactionDrillDown(Nullable<int> salesOrderHeaderId, Nullable<int> warehouseLocationId)
        {
            var salesOrderHeaderIdParameter = salesOrderHeaderId.HasValue ?
                new ObjectParameter("SalesOrderHeaderId", salesOrderHeaderId) :
                new ObjectParameter("SalesOrderHeaderId", typeof(int));
    
            var warehouseLocationIdParameter = warehouseLocationId.HasValue ?
                new ObjectParameter("WarehouseLocationId", warehouseLocationId) :
                new ObjectParameter("WarehouseLocationId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FindTransactionDrillDown_Result>("FindTransactionDrillDown", salesOrderHeaderIdParameter, warehouseLocationIdParameter);
        }
    
        public virtual ObjectResult<FindAvailabilityDetails_Result> FindAvailabilityDetails(Nullable<int> productId, Nullable<int> locationId, Nullable<int> brandCategoryId)
        {
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("ProductId", productId) :
                new ObjectParameter("ProductId", typeof(int));
    
            var locationIdParameter = locationId.HasValue ?
                new ObjectParameter("LocationId", locationId) :
                new ObjectParameter("LocationId", typeof(int));
    
            var brandCategoryIdParameter = brandCategoryId.HasValue ?
                new ObjectParameter("BrandCategoryId", brandCategoryId) :
                new ObjectParameter("BrandCategoryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FindAvailabilityDetails_Result>("FindAvailabilityDetails", productIdParameter, locationIdParameter, brandCategoryIdParameter);
        }
    
        public virtual ObjectResult<FindSaleDetails_Result> FindSaleDetails(Nullable<int> productId, Nullable<int> locationId, Nullable<int> brandCategoryId)
        {
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("ProductId", productId) :
                new ObjectParameter("ProductId", typeof(int));
    
            var locationIdParameter = locationId.HasValue ?
                new ObjectParameter("LocationId", locationId) :
                new ObjectParameter("LocationId", typeof(int));
    
            var brandCategoryIdParameter = brandCategoryId.HasValue ?
                new ObjectParameter("BrandCategoryId", brandCategoryId) :
                new ObjectParameter("BrandCategoryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FindSaleDetails_Result>("FindSaleDetails", productIdParameter, locationIdParameter, brandCategoryIdParameter);
        }
    
        public virtual int NewItemAllocation(Nullable<int> sodId, Nullable<int> itemId, Nullable<int> locationId, Nullable<System.DateTimeOffset> effectiveDate)
        {
            var sodIdParameter = sodId.HasValue ?
                new ObjectParameter("SodId", sodId) :
                new ObjectParameter("SodId", typeof(int));
    
            var itemIdParameter = itemId.HasValue ?
                new ObjectParameter("ItemId", itemId) :
                new ObjectParameter("ItemId", typeof(int));
    
            var locationIdParameter = locationId.HasValue ?
                new ObjectParameter("LocationId", locationId) :
                new ObjectParameter("LocationId", typeof(int));
    
            var effectiveDateParameter = effectiveDate.HasValue ?
                new ObjectParameter("EffectiveDate", effectiveDate) :
                new ObjectParameter("EffectiveDate", typeof(System.DateTimeOffset));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("NewItemAllocation", sodIdParameter, itemIdParameter, locationIdParameter, effectiveDateParameter);
        }
    
        public virtual ObjectResult<GetMenuTree_Result> GetMenuTree(Nullable<int> menuRootId, Nullable<int> isLoggedIn, string currentRoles, Nullable<int> objectFlags, string currentTag)
        {
            var menuRootIdParameter = menuRootId.HasValue ?
                new ObjectParameter("MenuRootId", menuRootId) :
                new ObjectParameter("MenuRootId", typeof(int));
    
            var isLoggedInParameter = isLoggedIn.HasValue ?
                new ObjectParameter("IsLoggedIn", isLoggedIn) :
                new ObjectParameter("IsLoggedIn", typeof(int));
    
            var currentRolesParameter = currentRoles != null ?
                new ObjectParameter("CurrentRoles", currentRoles) :
                new ObjectParameter("CurrentRoles", typeof(string));
    
            var objectFlagsParameter = objectFlags.HasValue ?
                new ObjectParameter("ObjectFlags", objectFlags) :
                new ObjectParameter("ObjectFlags", typeof(int));
    
            var currentTagParameter = currentTag != null ?
                new ObjectParameter("CurrentTag", currentTag) :
                new ObjectParameter("CurrentTag", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetMenuTree_Result>("GetMenuTree", menuRootIdParameter, isLoggedInParameter, currentRolesParameter, objectFlagsParameter, currentTagParameter);
        }
    }
}
